# DSA-based-algorithm
#include<bits/stdc++.h>
using namespace std;

class solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
        int spanningTree(int V, vector<vector<int>> adj[])
        {
            vector<bool> mst(V, false);
            vector<int> dist(V, INT_MAX);
            
            dist[0]=0;
            priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
            pq.push({0, 2});
            int mstCost=0;
            while(!pq.empty()){
                int cur_node= pq.top().second;
                dist[cur_node] = pq.top().first;
                pq.pop();
                
                if(mst[cur_node]){
                    continue;
                }
                mst[cur_node]=true;
                mstCost+=dist[cur_node];
                
                for(vector<int> nbrProp: adj[cur_node]){
                    int nbr = nbrProp[0];
                    int wt = nbrProp[1];
                    if(!mst[nbr] && dist[nbr] > wt){
                        dist[nbr] = wt;
                        pq.push({wt, nbr});
                    }
                }
            }
            return mstCost;
        }
};
int main(){
    int v, e;
    cin>>v>>e;
    vector<vector<int>> adj[v];
    int i=0;
    while(i++ < e){
        int u, v, w;
        cin>>u>>v>>w;
        vector<int> t1, t2;
        t1.push_back(v);
        t1.push_back(w);
        adj[u].push_back(t1);
        t2.push_back(u);
        t2.push_back(w);
        adj[v].push_back(t2);
    }
    solution obj;
    cout<<obj.spanningTree(v, adj)<<"\n";

    return 0;
}
